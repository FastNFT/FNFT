% MEX_FNFT_KDVV Fast nonlinear Fourier transform for the Korteweg-de Vries
% equation with vanishing boundaries.
%
%   [contspec, bound_states, normconsts] = MEX_FNFT_KDVV(q, T, XI)
%   [contspec, bound_states, normconsts] = MEX_FNFT_KDVV(q, T, XI,
%                                                        OPTIONAL INPUTS)
%
% DESCRIPTION
%   Provides an interface to the C routine fnft_kdvv.
%
% INPUTS
%   q               Complex row vector of length D>1
%   T               Real 1x2 vector
%   XI              Real 1x2 vector
%
% OPTIONAL INPUTS
%   It is possible to provide additional inputs. These come either in the
%   form of a single string or of a string followed by a value.
%
%   'M'             The length of the vector contspec. Followed by the
%                   desired value, a positive integer.
%   'bsloc_newton'  Use Newton's method to locate bound states. This method
%                   is reliable if good intial guesses for the bound states
%                   are known. Followed by a complex row vector of K
%                   initial guesses. It requires O(niter KD) FLOPs.
%   'bsloc_gridsearch_refine' The algorithm evaluates a(xi) on the grid xi =
%                   1i*[eps(1-eps(1)),h*(1:(M-2)),(M-1)h-eps((M-1)h)], where
%                   h:= \sqrt{c \max_t q(t)} / (M-1), where M=1000 and c=1 for
%                   all second order discretizations,
%                   fnft_kdv_discretization_4SPLIT4A/B, and
%                   fnft_kdv_discretization_CF4_2; c is approximately 2 for
%                   other discretizations. The sign changes of a(xi) on this
%                   grid are used as initial guesses for the bound states, which
%                   are then refined as in 'bsloc_newton'.
%   'bsloc_niter'   Number of iterations to be carried by Newton's method.
%                   Followed by a positive integer.
%   'RE'            Use Richardson extrpolation to improve accuracy. The
%                   approximations of the nonlinear Fourier spectrum are
%                   calcuated using all given samples and again with half of
%                   the samples. The two approximations are combined
%                   through the idea of Richardson extrpolation to
%                   hopefully obtain a more accurate approximation. Note
%                   that in certain situations such as discontinuous signals,
%                   enabling this option may result in worse accuracy than
%                   without it.
%   'dstype_residues'   Return residues instead of norming constants
%   'cstype_ab'     Returns values of a(xi) and b(xi) individually instead
%                   of the values of reflection coefficient b(xi)/a(xi)
%   'skip_cs'       Skip computation of the continuous spectrum.
%   'skip_bs'       Skip computation of the bound states. Implies 'skip_nc'.
%   'skip_nc'       Skip computation of the norming constants.
%   'quiet'         Turns off messages generated by then FNFT C library.
%                   (To turn off the messages generated by the mex
%                   interface functions, use MATLAB's warning and error
%                   commands instead.)
%
%       The following options specify the use of fast discretization schemes,
%       characterised by the Order of the base method (O), Polynomial degree per
%       potential sample (P), and order of occuracy of the splitting scheme (S).
%   'discr_modal'    O = 2; P = 1;   S=2.
%   'discr_2split1A' O = 2; P = 1;   S=1.
%   'discr_2split1B' O = 2; P = 1;   S=1.
%   'discr_2split2A' O = 2; P = 1;   S=2.
%   'discr_2split2B' O = 2; P = 1;   S=2.
%   'discr_2split2S' O = 2; P = 1;   S=2.
%   'discr_2split3A' O = 2; P = 3;   S=3.
%   'discr_2split3B' O = 2; P = 3;   S=3.
%   'discr_2split3S' O = 2; P = 2;   S=3.
%   'discr_2split4A' O = 2; P = 4;   S=4.
%   'discr_2split4B' O = 2; P = 2;   S=4.
%   'discr_2split5A' O = 2; P = 15;  S=5.
%   'discr_2split5B' O = 2; P = 15;  S=5.
%   'discr_2split6A' O = 2; P = 12;  S=6.
%   'discr_2split6B' O = 2; P = 6;   S=6.
%   'discr_2split7A' O = 2; P = 105; S=7.
%   'discr_2split7B' O = 2; P = 105; S=7.
%   'discr_2split8A' O = 2; P = 24;  S=8.
%   'discr_2split8B' O = 2; P = 12;  S=8.
%   'discr_4split4A' O = 4; P = 4;   S=4.
%   'discr_4split4B' O = 4; P = 2;   S=4.
%
%       The following options specify slow discretization schemes.
%   'discr_BO'      Use the second-order method by Boffetta-Osborne.
%                   Requires one matrix exponential per sample.
%   'discr_CF4_2'   Use fourth-order commutator-free exponential integrator
%                   which requires two matrix exponentials per sample.
%   'discr_CF4_3'   Use fourth-order commutator-free exponential integrator
%                   which requires three matrix exponentials per sample.
%   'discr_CF5_3'   Use fifth-order commutator-free exponential integrator
%                   which requires three matrix exponentials per sample.
%   'discr_CF6_4'   Use sixth-order commutator-free exponential integrator
%                   which requires four matrix exponentials per sample.
%   'discr_ES4'     Use fourth-order exponential integrator
%                   which requires one matrix exponential per sample.
%   'discr_TES4'    Use fourth-order exponential integrator
%                   which requires three matrix exponentials per sample.
%
% OUTPUTS
%   contspec        Complex row vector of length M, the default is M=D
%                   (or [] if skipped)
%   bound_states    Complex row vector of length K (or [] if skipped)
%   normconsts      Complex row vector of length K (or [] if skipped)


% This file is part of FNFT.
%
% FNFT is free software; you can redistribute it and/or
% modify it under the terms of the version 2 of the GNU General
% Public License as published by the Free Software Foundation.
%
% FNFT is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program. If not, see <http://www.gnu.org/licenses/>.
%
% Contributors:
% Sander Wahls (TU Delft) 2017-2018.
% Shrinivas Chimmalgi (TU Delft) 2019-2020.
% Peter J. Prins (TU Delft) 2021.
